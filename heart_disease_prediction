# heart_disease_prediction_models.ipynb

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import pickle
import joblib

# Load dataset (replace with your dataset path)
# Example dataset: https://www.kaggle.com/datasets/johnsmith88/heart-disease-dataset
df = pd.read_csv('heart.csv')

# Data preprocessing
# Handle missing values if any
df = df.dropna()

# Feature selection (adjust based on your dataset)
X = df.drop(['target'], axis=1)
y = df['target']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# SVM Model
svm_model = SVC(kernel='linear', probability=True)
svm_model.fit(X_train_scaled, y_train)
svm_pred = svm_model.predict(X_test_scaled)

accuracy_svm = accuracy_score(y_test, svm_pred)
print("SVM Model Performance:")
print("Accuracy:", accuracy_score(y_test, svm_pred)*100)
print("Classification Report:\n", classification_report(y_test, svm_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, svm_pred))

# Decision Tree Model
dt_model = DecisionTreeClassifier(max_depth=5, random_state=42)
dt_model.fit(X_train, y_train)
dt_pred = dt_model.predict(X_test)

accuracy_dt = accuracy_score(y_test, dt_pred)
print("\nDecision Tree Model Performance:")
print(f"Decision Tree Accuracy: {accuracy_dt * 100:.2f}%")
print("Classification Report:\n", classification_report(y_test, dt_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, dt_pred))

# Save models and scaler
joblib.dump(svm_model, 'svm_model.pkl')
joblib.dump(dt_model, 'dt_model.pkl')
joblib.dump(scaler, 'scaler.pkl')